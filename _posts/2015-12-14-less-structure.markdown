---
layout: post
title:  "Starting a Style Customization"
date:   2015-11-26 03:00:08
categories: custom
tags: [edirectory, custom-design]
---


---

## Introduction

eDirectory 11 is built with the PHP framework [Symfony](http://symfony.com/). For the frontend, it's based on [Bootstrap v3.3.4](https://github.com/twbs/bootstrap/releases/tag/v3.3.4) and two auxiliary tools, [Twig](http://twig.sensiolabs.org/) and [Assetic](http://symfony.com/doc/current/cookbook/assetic/index.html).
**Twig** is a template engine for PHP that removes the complexity and massive PHP code from the HTML, creating an easy and friendly code to maintain. In the other hand, the library **Assetic** is used to manage assets files, creating the main stylesheet file to be included in all frontend pages.

Let's start with the stylesheet structure. eDirectory 11 works with 3 main stylesheet files:

1. **style.css** -> The result of the compilation of all .less files by Assetic. It includes all css declarations, including third-party plugins, and should not be changed.
2. **colorscheme.css** -> This file is used when the customer uses the feature *Color Options*, which gives the site manager the ability to overwrite the main colors of the theme. This file is generated from the file `edirectory/web/theme/customtheme/colorscheme.php`, which is basically a regular stylesheet file, but in PHP format. When a color is changed, the system uses this base file, replaces the color and generates the final `colorscheme.css` file again.
3. **csseditor.css** -> Available when the customer uses the feature *CSS Editor* , which gives the site manager the ability to customize the theme without direct access to the stylesheets files. This file is empty by default, and it's the last one added on the page structure.

---

## Working with Less 

eDirectory source code is written in [LESS](http://lesscss.org/), a CSS pre-processor, meaning that it extends the CSS language, adding features that allow variables, mixins, functions and many other techniques that allow you to make CSS that is more maintainable, themable and extendable. The code is split in several .less files, that generates a single .css in the end.
On the file `edirectory/app/Resources/themes/customtheme/base.html.twig`, the block stylesheets calls all files for your theme. See below:

{% highlight php %}
{% raw %}
{% spaceless %}
   {% block stylesheets %}
       {% stylesheets
       filter='cssrewrite'
       output='assets/css/customtheme/style.css'
       '%kernel.root_dir%/Resources/themes/customtheme/assets/less/theme.less'
       'assets/js/lib/owl-carousel/*.css' %}
       <link href="{{ asset_url }}" rel="stylesheet"/>
       {% endstylesheets %}
   {% endblock -%}
{% endspaceless -%}

<link href="{{ asset(getDomainParameter('path') ~ 'theme/customtheme/colorscheme.css') }}" rel="stylesheet"/>

{% if file_exists(getDomainParameter('path') ~ 'theme/customtheme/csseditor.css') -%}
   <link href="{{ asset(getDomainParameter('path') ~ 'theme/customtheme/csseditor.css') }}" rel="stylesheet"/>
{% endif -%}
{% endraw %}
{% endhighlight %}

The first part of the code is simply telling the system to get all .less files listed on `edirectory/app/Resources/themes/customtheme/assets/less/theme.less` and compile them to the final .css `edirectory/app/assets/css/customtheme/style.css`.
Next, it's includes the custom colors file (`colorscheme.css`) and finally, it checks if exists a custom css file generated by the CSS Editor feature and includes it.

If you're making changes to your .less files in production, Assetic should automatically compile them again after every change. In development, you need to do the following:

Browse to the root folder of your project using a command line tool, like Terminal for Mac, and run the following command:

{% highlight bash %}
app/console assetic:watch 
{% endhighlight %}

This command will be watching the assets folder and will recompile the main stylesheet file every time any changes are done in one of the LESS files.

Any css file on the folder `edirectory/app/Resources/themes/customtheme/css/` will be automatically added to the minimized file `style.css`.

---

## Less Structure
eDirectory .less files are based on the frontend framework [Bootstrap v3.3.4](https://github.com/twbs/bootstrap/releases/tag/v3.3.4) and only the main file `theme.less` is called by ASSETIC. This file replaces bootstrap.less and contains all @import including variables, mixins, plugins and resets.

When you start your theme customization, start by setting the main characteristics of the layout on the file `variables.less`. This file determines the colors and sizes used on mixins and functions. Read the file carefully before editing any variable and donâ€™t forget to update the default colors in the colorscheme file: `default_themecolors.inc.php` (see more details on the topic **Color Scheme**).

After importing the main bootstrap files, eDirectory special styles are included. See below the file structure for a default eDirectory v11 Instalation:

{% highlight css %}
//eDirectory Components
@import "main-structure.less";
//The main elements are listed here. header, search, blocks and footer. 

@import "theme-box.less";
//The card structure to display eDirectory Items.

@import "reviews.less";
//Style for Reviews boxes and reviews rating

@import "social-links.less";
//Facebook buttons, social likes counter and any social interaction

@import "list-columns.less";
//Display list as columns with css3 rules

@import "calendar-events.less";
//Events calendar

@import "newsletter.less";
//Newsletter box style

@import "summary.less";
// All summary items layout

@import "detail.less";
// All detail pages layout

@import "special-pages.less";
// Faq and Sitemap

@import "login.less";
// Login Page style

@import "plans.less";
// Advertise Page Style for plans boxes

@import "members.less";
// Old structure for members layout

@import "scheme-members.less";
// Old structure for members layout colors

@import "order.less";
// Orders page

{% endhighlight %}

---

## HTML Structure

To customize an eDirectory theme, you'll be working on the following folders:

1) `/edirectory/app/Resources/themes/customtheme`: The main structure of the theme on Symfony's structure, using [Twig](http://twig.sensiolabs.org/), a template engine for PHP. Below are listed the main files that you should be familiar with:

* base.html.twig: base html structure, including the main tags html, head and body.

* index.html.twig: structure for the home page

* maintenance.html.twig: maintenance page

* results.html.twig: results page

* /assets/less: all .less files are here

* /blocks: the pages are structured in smaller blocks that can be found on this folder

* /modules: Twigs for each module, split mainly on index, results and detail

* /pages: secondary pages like contact us, faq, site map, etc

2) `/edirectory/web/theme/customtheme`: eDirectory still has some legacy code that was not migrated to Symfony yet. The profile and members sections are one of those code. For the profile section, it has the same header and footer as the frontend structure, and the HTML is duplicated on this folder. If your customization includes any structure change on the header or footer, it should be replicated on the files `header.php` and `footer.php` from this folder.

---

## Color Scheme

The color scheme features allows the site manager to easily change the main colors of the site. eDirectory's default theme offers five colors to be changed:
* Color 1 and Color 2: these are the two main colors of theme pallet
* Main navigation background
* Main navigation bar links
* Footer links

If you need more colors, talk to a developer, some PHP changes will be needed.

Additionaly, it's also possible to change the font family.

The last step of your theme customization is to update this functionality. This is done in two steps:

1) Update the default colors: here you simply need to tell the system which are the default colors of your theme, so the site manager can easily restore the pallet. To do so, open the file `edirectory/web/conf/default_themecolors.inc.php`. Copy the block of an existing theme, paste it **before** the line `define("ARRAY_DEFAULT_COLORS", serialize($arrayColors));` and replace the colors. See example below:

1.1) Original file

{% highlight php %}
{% raw %}

    //Theme: Default
	//Scheme Color: Default

	//Main pallete colors
	$arrayColors["default"]["default"]["color1"] = "42414f";
	$arrayColors["default"]["default"]["color2"] = "ff5a5f";

	//Advanced colors
	$arrayColors["default"]["default"]["colorNavbar"] = "f8f8f8";
	$arrayColors["default"]["default"]["colorNavbarLink"] = "252525";
	$arrayColors["default"]["default"]["colorFooterLink"] = "f2f2f4";
	$arrayColors["default"]["default"]["fontOption"] = "1";
	$arrayColors["default"]["default"]["fontName"] = "\"Source Sans Pro\", \"Trebuchet MS\", sans-serif";

	$arrayColors["default"]["default"]["colorKnob"] = "333333";

	# ----------------------------------------------------------------------------------------------------
	//Theme: Doctor
	//Scheme Color: Doctor

	//Main pallete colors
	$arrayColors["doctor"]["doctor"]["color1"] = "244576";
	$arrayColors["doctor"]["doctor"]["color2"] = "638cbf";

	//Advanced colors
	$arrayColors["doctor"]["doctor"]["colorNavbar"] = "ffffff";
	$arrayColors["doctor"]["doctor"]["colorNavbarLink"] = "2d2d2c";
	$arrayColors["doctor"]["doctor"]["colorFooterLink"] = "2d2d2c";
	$arrayColors["doctor"]["doctor"]["fontOption"] = "1";
	$arrayColors["doctor"]["doctor"]["fontName"] = "\"Source Sans Pro\", \"Trebuchet MS\", sans-serif";

	$arrayColors["doctor"]["doctor"]["colorKnob"] = "333333";

	# ----------------------------------------------------------------------------------------------------
	//Theme: Restaurant
	//Scheme Color: Restaurant

	//Main pallete colors
	$arrayColors["restaurant"]["restaurant"]["color1"] = "722302";
	$arrayColors["restaurant"]["restaurant"]["color2"] = "180c0c";

	//Advanced colors
	$arrayColors["restaurant"]["restaurant"]["colorNavbar"] = "f1f4f0";
	$arrayColors["restaurant"]["restaurant"]["colorNavbarLink"] = "722302";
	$arrayColors["restaurant"]["restaurant"]["colorFooterLink"] = "22161b";
	$arrayColors["restaurant"]["restaurant"]["fontOption"] = "1";
	$arrayColors["restaurant"]["restaurant"]["fontName"] = "Bitter, Georgia, \"Times New Roman\", Times, serif;";

	$arrayColors["restaurant"]["restaurant"]["colorKnob"] = "333333";
	# ----------------------------------------------------------------------------------------------------
	//Theme: Wedding
	//Scheme Color: Wedding

	//Main pallete colors
	$arrayColors["wedding"]["wedding"]["color1"] = "7f4c4c";
	$arrayColors["wedding"]["wedding"]["color2"] = "ff9797";

	//Advanced colors
	$arrayColors["wedding"]["wedding"]["colorNavbar"] = "fcfcfc";
	$arrayColors["wedding"]["wedding"]["colorNavbarLink"] = "7f4c4c";
	$arrayColors["wedding"]["wedding"]["colorFooterLink"] = "ffffff";
	$arrayColors["wedding"]["wedding"]["fontOption"] = "1";
	$arrayColors["wedding"]["wedding"]["fontName"] = "\"Source Sans Pro\", \"Trebuchet MS\", sans-serif;";

	$arrayColors["wedding"]["wedding"]["colorKnob"] = "333333";

	define("ARRAY_DEFAULT_COLORS", serialize($arrayColors));

{% endraw %}
{% endhighlight %}

1.2) File after adding the new theme called **mytheme**

{% highlight php %}
{% raw %}
    //Theme: Default
	//Scheme Color: Default

	//Main pallete colors
	$arrayColors["default"]["default"]["color1"] = "42414f";
	$arrayColors["default"]["default"]["color2"] = "ff5a5f";

	//Advanced colors
	$arrayColors["default"]["default"]["colorNavbar"] = "f8f8f8";
	$arrayColors["default"]["default"]["colorNavbarLink"] = "252525";
	$arrayColors["default"]["default"]["colorFooterLink"] = "f2f2f4";
	$arrayColors["default"]["default"]["fontOption"] = "1";
	$arrayColors["default"]["default"]["fontName"] = "\"Source Sans Pro\", \"Trebuchet MS\", sans-serif";

	$arrayColors["default"]["default"]["colorKnob"] = "333333";

	# ----------------------------------------------------------------------------------------------------
	//Theme: Doctor
	//Scheme Color: Doctor

	//Main pallete colors
	$arrayColors["doctor"]["doctor"]["color1"] = "244576";
	$arrayColors["doctor"]["doctor"]["color2"] = "638cbf";

	//Advanced colors
	$arrayColors["doctor"]["doctor"]["colorNavbar"] = "ffffff";
	$arrayColors["doctor"]["doctor"]["colorNavbarLink"] = "2d2d2c";
	$arrayColors["doctor"]["doctor"]["colorFooterLink"] = "2d2d2c";
	$arrayColors["doctor"]["doctor"]["fontOption"] = "1";
	$arrayColors["doctor"]["doctor"]["fontName"] = "\"Source Sans Pro\", \"Trebuchet MS\", sans-serif";

	$arrayColors["doctor"]["doctor"]["colorKnob"] = "333333";

	# ----------------------------------------------------------------------------------------------------
	//Theme: Restaurant
	//Scheme Color: Restaurant

	//Main pallete colors
	$arrayColors["restaurant"]["restaurant"]["color1"] = "722302";
	$arrayColors["restaurant"]["restaurant"]["color2"] = "180c0c";

	//Advanced colors
	$arrayColors["restaurant"]["restaurant"]["colorNavbar"] = "f1f4f0";
	$arrayColors["restaurant"]["restaurant"]["colorNavbarLink"] = "722302";
	$arrayColors["restaurant"]["restaurant"]["colorFooterLink"] = "22161b";
	$arrayColors["restaurant"]["restaurant"]["fontOption"] = "1";
	$arrayColors["restaurant"]["restaurant"]["fontName"] = "Bitter, Georgia, \"Times New Roman\", Times, serif;";

	$arrayColors["restaurant"]["restaurant"]["colorKnob"] = "333333";

	# ----------------------------------------------------------------------------------------------------
	//Theme: Wedding
	//Scheme Color: Wedding

	//Main pallete colors
	$arrayColors["wedding"]["wedding"]["color1"] = "7f4c4c";
	$arrayColors["wedding"]["wedding"]["color2"] = "ff9797";

	//Advanced colors
	$arrayColors["wedding"]["wedding"]["colorNavbar"] = "fcfcfc";
	$arrayColors["wedding"]["wedding"]["colorNavbarLink"] = "7f4c4c";
	$arrayColors["wedding"]["wedding"]["colorFooterLink"] = "ffffff";
	$arrayColors["wedding"]["wedding"]["fontOption"] = "1";
	$arrayColors["wedding"]["wedding"]["fontName"] = "\"Source Sans Pro\", \"Trebuchet MS\", sans-serif;";

	$arrayColors["wedding"]["wedding"]["colorKnob"] = "333333";

	# ----------------------------------------------------------------------------------------------------
    //Theme: MyTheme
    //Scheme Color: MyTheme

    //Main pallete colors
    $arrayColors["mytheme"]["mytheme"]["color1"] = "7f4c4c";
    $arrayColors["mytheme"]["mytheme"]["color2"] = "ff9797";

    //Advanced colors
    $arrayColors["mytheme"]["mytheme"]["colorNavbar"] = "fcfcfc";
    $arrayColors["mytheme"]["mytheme"]["colorNavbarLink"] = "7f4c4c";
    $arrayColors["mytheme"]["mytheme"]["colorFooterLink"] = "ffffff";
    $arrayColors["mytheme"]["mytheme"]["fontOption"] = "1";
    $arrayColors["mytheme"]["mytheme"]["fontName"] = "\"Source Sans Pro\", \"Trebuchet MS\", sans-serif;";

    $arrayColors["mytheme"]["mytheme"]["colorKnob"] = "333333";

	define("ARRAY_DEFAULT_COLORS", serialize($arrayColors));

{% endraw %}
{% endhighlight %}

---

## Pages List

---

## Literature

[How to Use Assetic for Asset Management](http://symfony.com/doc/current/cookbook/assetic/asset_management.html)

[Assetic Guthub](https://github.com/kriswallsmith/assetic)

[Getting started with Less](http://lesscss.org/)
